{"version":3,"sources":["meteor://ðŸ’»app/packages/mrt_later/packages/mrt_later.js"],"names":[],"mappingsfile":"/packages/mrt_later.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mrt:later/later/later.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlater = function() {                                                                                                   // 1\n  var later = {                                                                                                        // 2\n    version: \"1.1.6\"                                                                                                   // 3\n  };                                                                                                                   // 4\n  if (!Array.prototype.indexOf) {                                                                                      // 5\n    Array.prototype.indexOf = function(searchElement) {                                                                // 6\n      \"use strict\";                                                                                                    // 7\n      if (this == null) {                                                                                              // 8\n        throw new TypeError();                                                                                         // 9\n      }                                                                                                                // 10\n      var t = Object(this);                                                                                            // 11\n      var len = t.length >>> 0;                                                                                        // 12\n      if (len === 0) {                                                                                                 // 13\n        return -1;                                                                                                     // 14\n      }                                                                                                                // 15\n      var n = 0;                                                                                                       // 16\n      if (arguments.length > 1) {                                                                                      // 17\n        n = Number(arguments[1]);                                                                                      // 18\n        if (n != n) {                                                                                                  // 19\n          n = 0;                                                                                                       // 20\n        } else if (n != 0 && n != Infinity && n != -Infinity) {                                                        // 21\n          n = (n > 0 || -1) * Math.floor(Math.abs(n));                                                                 // 22\n        }                                                                                                              // 23\n      }                                                                                                                // 24\n      if (n >= len) {                                                                                                  // 25\n        return -1;                                                                                                     // 26\n      }                                                                                                                // 27\n      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);                                                             // 28\n      for (;k < len; k++) {                                                                                            // 29\n        if (k in t && t[k] === searchElement) {                                                                        // 30\n          return k;                                                                                                    // 31\n        }                                                                                                              // 32\n      }                                                                                                                // 33\n      return -1;                                                                                                       // 34\n    };                                                                                                                 // 35\n  }                                                                                                                    // 36\n  if (!String.prototype.trim) {                                                                                        // 37\n    String.prototype.trim = function() {                                                                               // 38\n      return this.replace(/^\\s+|\\s+$/g, \"\");                                                                           // 39\n    };                                                                                                                 // 40\n  }                                                                                                                    // 41\n  later.array = {};                                                                                                    // 42\n  later.array.sort = function(arr, zeroIsLast) {                                                                       // 43\n    arr.sort(function(a, b) {                                                                                          // 44\n      return +a - +b;                                                                                                  // 45\n    });                                                                                                                // 46\n    if (zeroIsLast && arr[0] === 0) {                                                                                  // 47\n      arr.push(arr.shift());                                                                                           // 48\n    }                                                                                                                  // 49\n  };                                                                                                                   // 50\n  later.array.next = function(val, values, extent) {                                                                   // 51\n    var cur, zeroIsLargest = extent[0] !== 0, nextIdx = 0;                                                             // 52\n    for (var i = values.length - 1; i > -1; --i) {                                                                     // 53\n      cur = values[i];                                                                                                 // 54\n      if (cur === val) {                                                                                               // 55\n        return cur;                                                                                                    // 56\n      }                                                                                                                // 57\n      if (cur > val || cur === 0 && zeroIsLargest && extent[1] > val) {                                                // 58\n        nextIdx = i;                                                                                                   // 59\n        continue;                                                                                                      // 60\n      }                                                                                                                // 61\n      break;                                                                                                           // 62\n    }                                                                                                                  // 63\n    return values[nextIdx];                                                                                            // 64\n  };                                                                                                                   // 65\n  later.array.nextInvalid = function(val, values, extent) {                                                            // 66\n    var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n    while (next === (values[i] || zeroVal)) {                                                                          // 68\n      next++;                                                                                                          // 69\n      if (next > max) {                                                                                                // 70\n        next = min;                                                                                                    // 71\n      }                                                                                                                // 72\n      i++;                                                                                                             // 73\n      if (i === len) {                                                                                                 // 74\n        i = 0;                                                                                                         // 75\n      }                                                                                                                // 76\n      if (next === start) {                                                                                            // 77\n        return undefined;                                                                                              // 78\n      }                                                                                                                // 79\n    }                                                                                                                  // 80\n    return next;                                                                                                       // 81\n  };                                                                                                                   // 82\n  later.array.prev = function(val, values, extent) {                                                                   // 83\n    var cur, len = values.length, zeroIsLargest = extent[0] !== 0, prevIdx = len - 1;                                  // 84\n    for (var i = 0; i < len; i++) {                                                                                    // 85\n      cur = values[i];                                                                                                 // 86\n      if (cur === val) {                                                                                               // 87\n        return cur;                                                                                                    // 88\n      }                                                                                                                // 89\n      if (cur < val || cur === 0 && zeroIsLargest && extent[1] < val) {                                                // 90\n        prevIdx = i;                                                                                                   // 91\n        continue;                                                                                                      // 92\n      }                                                                                                                // 93\n      break;                                                                                                           // 94\n    }                                                                                                                  // 95\n    return values[prevIdx];                                                                                            // 96\n  };                                                                                                                   // 97\n  later.array.prevInvalid = function(val, values, extent) {                                                            // 98\n    var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n    while (next === (values[i] || zeroVal)) {                                                                          // 100\n      next--;                                                                                                          // 101\n      if (next < min) {                                                                                                // 102\n        next = max;                                                                                                    // 103\n      }                                                                                                                // 104\n      i--;                                                                                                             // 105\n      if (i === -1) {                                                                                                  // 106\n        i = len - 1;                                                                                                   // 107\n      }                                                                                                                // 108\n      if (next === start) {                                                                                            // 109\n        return undefined;                                                                                              // 110\n      }                                                                                                                // 111\n    }                                                                                                                  // 112\n    return next;                                                                                                       // 113\n  };                                                                                                                   // 114\n  later.day = later.D = {                                                                                              // 115\n    name: \"day\",                                                                                                       // 116\n    range: 86400,                                                                                                      // 117\n    val: function(d) {                                                                                                 // 118\n      return d.D || (d.D = later.date.getDate.call(d));                                                                // 119\n    },                                                                                                                 // 120\n    isValid: function(d, val) {                                                                                        // 121\n      return later.D.val(d) === (val || later.D.extent(d)[1]);                                                         // 122\n    },                                                                                                                 // 123\n    extent: function(d) {                                                                                              // 124\n      if (d.DExtent) return d.DExtent;                                                                                 // 125\n      var month = later.M.val(d), max = later.DAYS_IN_MONTH[month - 1];                                                // 126\n      if (month === 2 && later.dy.extent(d)[1] === 366) {                                                              // 127\n        max = max + 1;                                                                                                 // 128\n      }                                                                                                                // 129\n      return d.DExtent = [ 1, max ];                                                                                   // 130\n    },                                                                                                                 // 131\n    start: function(d) {                                                                                               // 132\n      return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));                 // 133\n    },                                                                                                                 // 134\n    end: function(d) {                                                                                                 // 135\n      return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));                     // 136\n    },                                                                                                                 // 137\n    next: function(d, val) {                                                                                           // 138\n      val = val > later.D.extent(d)[1] ? 1 : val;                                                                      // 139\n      var month = later.date.nextRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];                  // 140\n      val = val > DMax ? 1 : val || DMax;                                                                              // 141\n      return later.date.next(later.Y.val(month), later.M.val(month), val);                                             // 142\n    },                                                                                                                 // 143\n    prev: function(d, val) {                                                                                           // 144\n      var month = later.date.prevRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];                  // 145\n      return later.date.prev(later.Y.val(month), later.M.val(month), val > DMax ? DMax : val || DMax);                 // 146\n    }                                                                                                                  // 147\n  };                                                                                                                   // 148\n  later.dayOfWeekCount = later.dc = {                                                                                  // 149\n    name: \"day of week count\",                                                                                         // 150\n    range: 604800,                                                                                                     // 151\n    val: function(d) {                                                                                                 // 152\n      return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);                                                // 153\n    },                                                                                                                 // 154\n    isValid: function(d, val) {                                                                                        // 155\n      return later.dc.val(d) === val || val === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;                        // 156\n    },                                                                                                                 // 157\n    extent: function(d) {                                                                                              // 158\n      return d.dcExtent || (d.dcExtent = [ 1, Math.ceil(later.D.extent(d)[1] / 7) ]);                                  // 159\n    },                                                                                                                 // 160\n    start: function(d) {                                                                                               // 161\n      return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));\n    },                                                                                                                 // 163\n    end: function(d) {                                                                                                 // 164\n      return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));\n    },                                                                                                                 // 166\n    next: function(d, val) {                                                                                           // 167\n      val = val > later.dc.extent(d)[1] ? 1 : val;                                                                     // 168\n      var month = later.date.nextRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];               // 169\n      val = val > dcMax ? 1 : val;                                                                                     // 170\n      var next = later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n      if (next.getTime() <= d.getTime()) {                                                                             // 172\n        month = later.M.next(d, later.M.val(d) + 1);                                                                   // 173\n        return later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n      }                                                                                                                // 175\n      return next;                                                                                                     // 176\n    },                                                                                                                 // 177\n    prev: function(d, val) {                                                                                           // 178\n      var month = later.date.prevRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];               // 179\n      val = val > dcMax ? dcMax : val || dcMax;                                                                        // 180\n      return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (val - 1)));                 // 181\n    }                                                                                                                  // 182\n  };                                                                                                                   // 183\n  later.dayOfWeek = later.dw = later.d = {                                                                             // 184\n    name: \"day of week\",                                                                                               // 185\n    range: 86400,                                                                                                      // 186\n    val: function(d) {                                                                                                 // 187\n      return d.dw || (d.dw = later.date.getDay.call(d) + 1);                                                           // 188\n    },                                                                                                                 // 189\n    isValid: function(d, val) {                                                                                        // 190\n      return later.dw.val(d) === (val || 7);                                                                           // 191\n    },                                                                                                                 // 192\n    extent: function() {                                                                                               // 193\n      return [ 1, 7 ];                                                                                                 // 194\n    },                                                                                                                 // 195\n    start: function(d) {                                                                                               // 196\n      return later.D.start(d);                                                                                         // 197\n    },                                                                                                                 // 198\n    end: function(d) {                                                                                                 // 199\n      return later.D.end(d);                                                                                           // 200\n    },                                                                                                                 // 201\n    next: function(d, val) {                                                                                           // 202\n      val = val > 7 ? 1 : val || 7;                                                                                    // 203\n      return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val <= later.dw.val(d) ? 7 : 0));\n    },                                                                                                                 // 205\n    prev: function(d, val) {                                                                                           // 206\n      val = val > 7 ? 7 : val || 7;                                                                                    // 207\n      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val >= later.dw.val(d) ? -7 : 0));\n    }                                                                                                                  // 209\n  };                                                                                                                   // 210\n  later.dayOfYear = later.dy = {                                                                                       // 211\n    name: \"day of year\",                                                                                               // 212\n    range: 86400,                                                                                                      // 213\n    val: function(d) {                                                                                                 // 214\n      return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));    // 215\n    },                                                                                                                 // 216\n    isValid: function(d, val) {                                                                                        // 217\n      return later.dy.val(d) === (val || later.dy.extent(d)[1]);                                                       // 218\n    },                                                                                                                 // 219\n    extent: function(d) {                                                                                              // 220\n      var year = later.Y.val(d);                                                                                       // 221\n      return d.dyExtent || (d.dyExtent = [ 1, year % 4 ? 365 : 366 ]);                                                 // 222\n    },                                                                                                                 // 223\n    start: function(d) {                                                                                               // 224\n      return later.D.start(d);                                                                                         // 225\n    },                                                                                                                 // 226\n    end: function(d) {                                                                                                 // 227\n      return later.D.end(d);                                                                                           // 228\n    },                                                                                                                 // 229\n    next: function(d, val) {                                                                                           // 230\n      val = val > later.dy.extent(d)[1] ? 1 : val;                                                                     // 231\n      var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];                 // 232\n      val = val > dyMax ? 1 : val || dyMax;                                                                            // 233\n      return later.date.next(later.Y.val(year), later.M.val(year), val);                                               // 234\n    },                                                                                                                 // 235\n    prev: function(d, val) {                                                                                           // 236\n      var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];                 // 237\n      val = val > dyMax ? dyMax : val || dyMax;                                                                        // 238\n      return later.date.prev(later.Y.val(year), later.M.val(year), val);                                               // 239\n    }                                                                                                                  // 240\n  };                                                                                                                   // 241\n  later.hour = later.h = {                                                                                             // 242\n    name: \"hour\",                                                                                                      // 243\n    range: 3600,                                                                                                       // 244\n    val: function(d) {                                                                                                 // 245\n      return d.h || (d.h = later.date.getHour.call(d));                                                                // 246\n    },                                                                                                                 // 247\n    isValid: function(d, val) {                                                                                        // 248\n      return later.h.val(d) === val;                                                                                   // 249\n    },                                                                                                                 // 250\n    extent: function() {                                                                                               // 251\n      return [ 0, 23 ];                                                                                                // 252\n    },                                                                                                                 // 253\n    start: function(d) {                                                                                               // 254\n      return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d))); // 255\n    },                                                                                                                 // 256\n    end: function(d) {                                                                                                 // 257\n      return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));     // 258\n    },                                                                                                                 // 259\n    next: function(d, val) {                                                                                           // 260\n      val = val > 23 ? 0 : val;                                                                                        // 261\n      var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.h.val(d) ? 1 : 0), val);\n      if (!later.date.isUTC && next.getTime() <= d.getTime()) {                                                        // 263\n        next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), val + 1);                      // 264\n      }                                                                                                                // 265\n      return next;                                                                                                     // 266\n    },                                                                                                                 // 267\n    prev: function(d, val) {                                                                                           // 268\n      val = val > 23 ? 23 : val;                                                                                       // 269\n      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.h.val(d) ? -1 : 0), val);  // 270\n    }                                                                                                                  // 271\n  };                                                                                                                   // 272\n  later.minute = later.m = {                                                                                           // 273\n    name: \"minute\",                                                                                                    // 274\n    range: 60,                                                                                                         // 275\n    val: function(d) {                                                                                                 // 276\n      return d.m || (d.m = later.date.getMin.call(d));                                                                 // 277\n    },                                                                                                                 // 278\n    isValid: function(d, val) {                                                                                        // 279\n      return later.m.val(d) === val;                                                                                   // 280\n    },                                                                                                                 // 281\n    extent: function(d) {                                                                                              // 282\n      return [ 0, 59 ];                                                                                                // 283\n    },                                                                                                                 // 284\n    start: function(d) {                                                                                               // 285\n      return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n    },                                                                                                                 // 287\n    end: function(d) {                                                                                                 // 288\n      return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n    },                                                                                                                 // 290\n    next: function(d, val) {                                                                                           // 291\n      var m = later.m.val(d), s = later.s.val(d), inc = val > 59 ? 60 - m : val <= m ? 60 - m + val : val - m, next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);\n      if (!later.date.isUTC && next.getTime() <= d.getTime()) {                                                        // 293\n        next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);                                        // 294\n      }                                                                                                                // 295\n      return next;                                                                                                     // 296\n    },                                                                                                                 // 297\n    prev: function(d, val) {                                                                                           // 298\n      val = val > 59 ? 59 : val;                                                                                       // 299\n      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (val >= later.m.val(d) ? -1 : 0), val);\n    }                                                                                                                  // 301\n  };                                                                                                                   // 302\n  later.month = later.M = {                                                                                            // 303\n    name: \"month\",                                                                                                     // 304\n    range: 2629740,                                                                                                    // 305\n    val: function(d) {                                                                                                 // 306\n      return d.M || (d.M = later.date.getMonth.call(d) + 1);                                                           // 307\n    },                                                                                                                 // 308\n    isValid: function(d, val) {                                                                                        // 309\n      return later.M.val(d) === (val || 12);                                                                           // 310\n    },                                                                                                                 // 311\n    extent: function() {                                                                                               // 312\n      return [ 1, 12 ];                                                                                                // 313\n    },                                                                                                                 // 314\n    start: function(d) {                                                                                               // 315\n      return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));                                 // 316\n    },                                                                                                                 // 317\n    end: function(d) {                                                                                                 // 318\n      return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));                                     // 319\n    },                                                                                                                 // 320\n    next: function(d, val) {                                                                                           // 321\n      val = val > 12 ? 1 : val || 12;                                                                                  // 322\n      return later.date.next(later.Y.val(d) + (val > later.M.val(d) ? 0 : 1), val);                                    // 323\n    },                                                                                                                 // 324\n    prev: function(d, val) {                                                                                           // 325\n      val = val > 12 ? 12 : val || 12;                                                                                 // 326\n      return later.date.prev(later.Y.val(d) - (val >= later.M.val(d) ? 1 : 0), val);                                   // 327\n    }                                                                                                                  // 328\n  };                                                                                                                   // 329\n  later.second = later.s = {                                                                                           // 330\n    name: \"second\",                                                                                                    // 331\n    range: 1,                                                                                                          // 332\n    val: function(d) {                                                                                                 // 333\n      return d.s || (d.s = later.date.getSec.call(d));                                                                 // 334\n    },                                                                                                                 // 335\n    isValid: function(d, val) {                                                                                        // 336\n      return later.s.val(d) === val;                                                                                   // 337\n    },                                                                                                                 // 338\n    extent: function() {                                                                                               // 339\n      return [ 0, 59 ];                                                                                                // 340\n    },                                                                                                                 // 341\n    start: function(d) {                                                                                               // 342\n      return d;                                                                                                        // 343\n    },                                                                                                                 // 344\n    end: function(d) {                                                                                                 // 345\n      return d;                                                                                                        // 346\n    },                                                                                                                 // 347\n    next: function(d, val) {                                                                                           // 348\n      var s = later.s.val(d), inc = val > 59 ? 60 - s : val <= s ? 60 - s + val : val - s, next = new Date(d.getTime() + inc * later.SEC);\n      if (!later.date.isUTC && next.getTime() <= d.getTime()) {                                                        // 350\n        next = new Date(d.getTime() + (inc + 7200) * later.SEC);                                                       // 351\n      }                                                                                                                // 352\n      return next;                                                                                                     // 353\n    },                                                                                                                 // 354\n    prev: function(d, val, cache) {                                                                                    // 355\n      val = val > 59 ? 59 : val;                                                                                       // 356\n      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (val >= later.s.val(d) ? -1 : 0), val);\n    }                                                                                                                  // 358\n  };                                                                                                                   // 359\n  later.time = later.t = {                                                                                             // 360\n    name: \"time\",                                                                                                      // 361\n    range: 1,                                                                                                          // 362\n    val: function(d) {                                                                                                 // 363\n      return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));                              // 364\n    },                                                                                                                 // 365\n    isValid: function(d, val) {                                                                                        // 366\n      return later.t.val(d) === val;                                                                                   // 367\n    },                                                                                                                 // 368\n    extent: function() {                                                                                               // 369\n      return [ 0, 86399 ];                                                                                             // 370\n    },                                                                                                                 // 371\n    start: function(d) {                                                                                               // 372\n      return d;                                                                                                        // 373\n    },                                                                                                                 // 374\n    end: function(d) {                                                                                                 // 375\n      return d;                                                                                                        // 376\n    },                                                                                                                 // 377\n    next: function(d, val) {                                                                                           // 378\n      val = val > 86399 ? 0 : val;                                                                                     // 379\n      var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.t.val(d) ? 1 : 0), 0, 0, val);\n      if (!later.date.isUTC && next.getTime() < d.getTime()) {                                                         // 381\n        next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), val + 7200);\n      }                                                                                                                // 383\n      return next;                                                                                                     // 384\n    },                                                                                                                 // 385\n    prev: function(d, val) {                                                                                           // 386\n      val = val > 86399 ? 86399 : val;                                                                                 // 387\n      return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.t.val(d) ? -1 : 0), 0, 0, val);\n    }                                                                                                                  // 389\n  };                                                                                                                   // 390\n  later.weekOfMonth = later.wm = {                                                                                     // 391\n    name: \"week of month\",                                                                                             // 392\n    range: 604800,                                                                                                     // 393\n    val: function(d) {                                                                                                 // 394\n      return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);     // 395\n    },                                                                                                                 // 396\n    isValid: function(d, val) {                                                                                        // 397\n      return later.wm.val(d) === (val || later.wm.extent(d)[1]);                                                       // 398\n    },                                                                                                                 // 399\n    extent: function(d) {                                                                                              // 400\n      return d.wmExtent || (d.wmExtent = [ 1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7 ]);\n    },                                                                                                                 // 402\n    start: function(d) {                                                                                               // 403\n      return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));\n    },                                                                                                                 // 405\n    end: function(d) {                                                                                                 // 406\n      return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));\n    },                                                                                                                 // 408\n    next: function(d, val) {                                                                                           // 409\n      val = val > later.wm.extent(d)[1] ? 1 : val;                                                                     // 410\n      var month = later.date.nextRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];               // 411\n      val = val > wmMax ? 1 : val || wmMax;                                                                            // 412\n      return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2)));\n    },                                                                                                                 // 414\n    prev: function(d, val) {                                                                                           // 415\n      var month = later.date.prevRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];               // 416\n      val = val > wmMax ? wmMax : val || wmMax;                                                                        // 417\n      return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2))));\n    }                                                                                                                  // 419\n  };                                                                                                                   // 420\n  later.weekOfYear = later.wy = {                                                                                      // 421\n    name: \"week of year (ISO)\",                                                                                        // 422\n    range: 604800,                                                                                                     // 423\n    val: function(d) {                                                                                                 // 424\n      if (d.wy) return d.wy;                                                                                           // 425\n      var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);\n      return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);                                   // 427\n    },                                                                                                                 // 428\n    isValid: function(d, val) {                                                                                        // 429\n      return later.wy.val(d) === (val || later.wy.extent(d)[1]);                                                       // 430\n    },                                                                                                                 // 431\n    extent: function(d) {                                                                                              // 432\n      if (d.wyExtent) return d.wyExtent;                                                                               // 433\n      var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));\n      return d.wyExtent = [ 1, dwFirst === 5 || dwLast === 5 ? 53 : 52 ];                                              // 435\n    },                                                                                                                 // 436\n    start: function(d) {                                                                                               // 437\n      return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));\n    },                                                                                                                 // 439\n    end: function(d) {                                                                                                 // 440\n      return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));\n    },                                                                                                                 // 442\n    next: function(d, val) {                                                                                           // 443\n      val = val > later.wy.extent(d)[1] ? 1 : val;                                                                     // 444\n      var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);\n      if (later.wy.val(year) !== 1) {                                                                                  // 446\n        year = later.dw.next(year, 2);                                                                                 // 447\n      }                                                                                                                // 448\n      var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);                                            // 449\n      val = val > wyMax ? 1 : val || wyMax;                                                                            // 450\n      return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (val - 1));        // 451\n    },                                                                                                                 // 452\n    prev: function(d, val) {                                                                                           // 453\n      var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);\n      if (later.wy.val(year) !== 1) {                                                                                  // 455\n        year = later.dw.next(year, 2);                                                                                 // 456\n      }                                                                                                                // 457\n      var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);                                                // 458\n      val = val > wyMax ? wyMax : val || wyMax;                                                                        // 459\n      return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (val - 1)));\n    }                                                                                                                  // 461\n  };                                                                                                                   // 462\n  later.year = later.Y = {                                                                                             // 463\n    name: \"year\",                                                                                                      // 464\n    range: 31556900,                                                                                                   // 465\n    val: function(d) {                                                                                                 // 466\n      return d.Y || (d.Y = later.date.getYear.call(d));                                                                // 467\n    },                                                                                                                 // 468\n    isValid: function(d, val) {                                                                                        // 469\n      return later.Y.val(d) === val;                                                                                   // 470\n    },                                                                                                                 // 471\n    extent: function() {                                                                                               // 472\n      return [ 1970, 2099 ];                                                                                           // 473\n    },                                                                                                                 // 474\n    start: function(d) {                                                                                               // 475\n      return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));                                                 // 476\n    },                                                                                                                 // 477\n    end: function(d) {                                                                                                 // 478\n      return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));                                                     // 479\n    },                                                                                                                 // 480\n    next: function(d, val) {                                                                                           // 481\n      return val > later.Y.val(d) && val <= later.Y.extent()[1] ? later.date.next(val) : later.NEVER;                  // 482\n    },                                                                                                                 // 483\n    prev: function(d, val) {                                                                                           // 484\n      return val < later.Y.val(d) && val >= later.Y.extent()[0] ? later.date.prev(val) : later.NEVER;                  // 485\n    }                                                                                                                  // 486\n  };                                                                                                                   // 487\n  later.fullDate = later.fd = {                                                                                        // 488\n    name: \"full date\",                                                                                                 // 489\n    range: 1,                                                                                                          // 490\n    val: function(d) {                                                                                                 // 491\n      return d.fd || (d.fd = d.getTime());                                                                             // 492\n    },                                                                                                                 // 493\n    isValid: function(d, val) {                                                                                        // 494\n      return later.fd.val(d) === val;                                                                                  // 495\n    },                                                                                                                 // 496\n    extent: function() {                                                                                               // 497\n      return [ 0, 3250368e7 ];                                                                                         // 498\n    },                                                                                                                 // 499\n    start: function(d) {                                                                                               // 500\n      return d;                                                                                                        // 501\n    },                                                                                                                 // 502\n    end: function(d) {                                                                                                 // 503\n      return d;                                                                                                        // 504\n    },                                                                                                                 // 505\n    next: function(d, val) {                                                                                           // 506\n      return later.fd.val(d) < val ? new Date(val) : later.NEVER;                                                      // 507\n    },                                                                                                                 // 508\n    prev: function(d, val) {                                                                                           // 509\n      return later.fd.val(d) > val ? new Date(val) : later.NEVER;                                                      // 510\n    }                                                                                                                  // 511\n  };                                                                                                                   // 512\n  later.modifier = {};                                                                                                 // 513\n  later.modifier.after = later.modifier.a = function(constraint, values) {                                             // 514\n    var value = values[0];                                                                                             // 515\n    return {                                                                                                           // 516\n      name: \"after \" + constraint.name,                                                                                // 517\n      range: (constraint.extent(new Date())[1] - value) * constraint.range,                                            // 518\n      val: constraint.val,                                                                                             // 519\n      isValid: function(d, val) {                                                                                      // 520\n        return this.val(d) >= value;                                                                                   // 521\n      },                                                                                                               // 522\n      extent: constraint.extent,                                                                                       // 523\n      start: constraint.start,                                                                                         // 524\n      end: constraint.end,                                                                                             // 525\n      next: function(startDate, val) {                                                                                 // 526\n        if (val != value) val = constraint.extent(startDate)[0];                                                       // 527\n        return constraint.next(startDate, val);                                                                        // 528\n      },                                                                                                               // 529\n      prev: function(startDate, val) {                                                                                 // 530\n        val = val === value ? constraint.extent(startDate)[1] : value - 1;                                             // 531\n        return constraint.prev(startDate, val);                                                                        // 532\n      }                                                                                                                // 533\n    };                                                                                                                 // 534\n  };                                                                                                                   // 535\n  later.modifier.before = later.modifier.b = function(constraint, values) {                                            // 536\n    var value = values[values.length - 1];                                                                             // 537\n    return {                                                                                                           // 538\n      name: \"before \" + constraint.name,                                                                               // 539\n      range: constraint.range * (value - 1),                                                                           // 540\n      val: constraint.val,                                                                                             // 541\n      isValid: function(d, val) {                                                                                      // 542\n        return this.val(d) < value;                                                                                    // 543\n      },                                                                                                               // 544\n      extent: constraint.extent,                                                                                       // 545\n      start: constraint.start,                                                                                         // 546\n      end: constraint.end,                                                                                             // 547\n      next: function(startDate, val) {                                                                                 // 548\n        val = val === value ? constraint.extent(startDate)[0] : value;                                                 // 549\n        return constraint.next(startDate, val);                                                                        // 550\n      },                                                                                                               // 551\n      prev: function(startDate, val) {                                                                                 // 552\n        val = val === value ? value - 1 : constraint.extent(startDate)[1];                                             // 553\n        return constraint.prev(startDate, val);                                                                        // 554\n      }                                                                                                                // 555\n    };                                                                                                                 // 556\n  };                                                                                                                   // 557\n  later.compile = function(schedDef) {                                                                                 // 558\n    var constraints = [], constraintsLen = 0, tickConstraint;                                                          // 559\n    for (var key in schedDef) {                                                                                        // 560\n      var nameParts = key.split(\"_\"), name = nameParts[0], mod = nameParts[1], vals = schedDef[key], constraint = mod ? later.modifier[mod](later[name], vals) : later[name];\n      constraints.push({                                                                                               // 562\n        constraint: constraint,                                                                                        // 563\n        vals: vals                                                                                                     // 564\n      });                                                                                                              // 565\n      constraintsLen++;                                                                                                // 566\n    }                                                                                                                  // 567\n    constraints.sort(function(a, b) {                                                                                  // 568\n      var ra = a.constraint.range, rb = b.constraint.range;                                                            // 569\n      return rb < ra ? -1 : rb > ra ? 1 : 0;                                                                           // 570\n    });                                                                                                                // 571\n    tickConstraint = constraints[constraintsLen - 1].constraint;                                                       // 572\n    function compareFn(dir) {                                                                                          // 573\n      return dir === \"next\" ? function(a, b) {                                                                         // 574\n        return a.getTime() > b.getTime();                                                                              // 575\n      } : function(a, b) {                                                                                             // 576\n        return b.getTime() > a.getTime();                                                                              // 577\n      };                                                                                                               // 578\n    }                                                                                                                  // 579\n    return {                                                                                                           // 580\n      start: function(dir, startDate) {                                                                                // 581\n        var next = startDate, nextVal = later.array[dir], maxAttempts = 1e3, done;                                     // 582\n        while (maxAttempts-- && !done && next) {                                                                       // 583\n          done = true;                                                                                                 // 584\n          for (var i = 0; i < constraintsLen; i++) {                                                                   // 585\n            var constraint = constraints[i].constraint, curVal = constraint.val(next), extent = constraint.extent(next), newVal = nextVal(curVal, constraints[i].vals, extent);\n            if (!constraint.isValid(next, newVal)) {                                                                   // 587\n              next = constraint[dir](next, newVal);                                                                    // 588\n              done = false;                                                                                            // 589\n              break;                                                                                                   // 590\n            }                                                                                                          // 591\n          }                                                                                                            // 592\n        }                                                                                                              // 593\n        if (next !== later.NEVER) {                                                                                    // 594\n          next = dir === \"next\" ? tickConstraint.start(next) : tickConstraint.end(next);                               // 595\n        }                                                                                                              // 596\n        return next;                                                                                                   // 597\n      },                                                                                                               // 598\n      end: function(dir, startDate) {                                                                                  // 599\n        var result, nextVal = later.array[dir + \"Invalid\"], compare = compareFn(dir);                                  // 600\n        for (var i = constraintsLen - 1; i >= 0; i--) {                                                                // 601\n          var constraint = constraints[i].constraint, curVal = constraint.val(startDate), extent = constraint.extent(startDate), newVal = nextVal(curVal, constraints[i].vals, extent), next;\n          if (newVal !== undefined) {                                                                                  // 603\n            next = constraint[dir](startDate, newVal);                                                                 // 604\n            if (next && (!result || compare(result, next))) {                                                          // 605\n              result = next;                                                                                           // 606\n            }                                                                                                          // 607\n          }                                                                                                            // 608\n        }                                                                                                              // 609\n        return result;                                                                                                 // 610\n      },                                                                                                               // 611\n      tick: function(dir, date) {                                                                                      // 612\n        return new Date(dir === \"next\" ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);\n      },                                                                                                               // 614\n      tickStart: function(date) {                                                                                      // 615\n        return tickConstraint.start(date);                                                                             // 616\n      }                                                                                                                // 617\n    };                                                                                                                 // 618\n  };                                                                                                                   // 619\n  later.schedule = function(sched) {                                                                                   // 620\n    if (!sched) throw new Error(\"Missing schedule definition.\");                                                       // 621\n    if (!sched.schedules) throw new Error(\"Definition must include at least one schedule.\");                           // 622\n    var schedules = [], schedulesLen = sched.schedules.length, exceptions = [], exceptionsLen = sched.exceptions ? sched.exceptions.length : 0;\n    for (var i = 0; i < schedulesLen; i++) {                                                                           // 624\n      schedules.push(later.compile(sched.schedules[i]));                                                               // 625\n    }                                                                                                                  // 626\n    for (var j = 0; j < exceptionsLen; j++) {                                                                          // 627\n      exceptions.push(later.compile(sched.exceptions[j]));                                                             // 628\n    }                                                                                                                  // 629\n    function getInstances(dir, count, startDate, endDate, isRange) {                                                   // 630\n      var compare = compareFn(dir), loopCount = count, maxAttempts = 1e3, schedStarts = [], exceptStarts = [], next, end, results = [], isForward = dir === \"next\", lastResult, rStart = isForward ? 0 : 1, rEnd = isForward ? 1 : 0;\n      startDate = startDate ? new Date(startDate) : new Date();                                                        // 632\n      if (!startDate || !startDate.getTime()) throw new Error(\"Invalid start date.\");                                  // 633\n      setNextStarts(dir, schedules, schedStarts, startDate);                                                           // 634\n      setRangeStarts(dir, exceptions, exceptStarts, startDate);                                                        // 635\n      while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {                                  // 636\n        if (endDate && compare(next, endDate)) {                                                                       // 637\n          break;                                                                                                       // 638\n        }                                                                                                              // 639\n        if (exceptionsLen) {                                                                                           // 640\n          updateRangeStarts(dir, exceptions, exceptStarts, next);                                                      // 641\n          if (end = calcRangeOverlap(dir, exceptStarts, next)) {                                                       // 642\n            updateNextStarts(dir, schedules, schedStarts, end);                                                        // 643\n            continue;                                                                                                  // 644\n          }                                                                                                            // 645\n        }                                                                                                              // 646\n        if (isRange) {                                                                                                 // 647\n          var maxEndDate = calcMaxEndDate(exceptStarts, compare);                                                      // 648\n          end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);                                                // 649\n          r = isForward ? [ new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined ] : [ end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC)) ];\n          if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {                                      // 651\n            lastResult[rEnd] = r[rEnd];                                                                                // 652\n            loopCount++;                                                                                               // 653\n          } else {                                                                                                     // 654\n            lastResult = r;                                                                                            // 655\n            results.push(lastResult);                                                                                  // 656\n          }                                                                                                            // 657\n          if (!end) break;                                                                                             // 658\n          updateNextStarts(dir, schedules, schedStarts, end);                                                          // 659\n        } else {                                                                                                       // 660\n          results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));\n          tickStarts(dir, schedules, schedStarts, next);                                                               // 662\n        }                                                                                                              // 663\n        loopCount--;                                                                                                   // 664\n      }                                                                                                                // 665\n      return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;                                  // 666\n    }                                                                                                                  // 667\n    function setNextStarts(dir, schedArr, startsArr, startDate) {                                                      // 668\n      for (var i = 0, len = schedArr.length; i < len; i++) {                                                           // 669\n        startsArr[i] = schedArr[i].start(dir, startDate);                                                              // 670\n      }                                                                                                                // 671\n    }                                                                                                                  // 672\n    function updateNextStarts(dir, schedArr, startsArr, startDate) {                                                   // 673\n      var compare = compareFn(dir);                                                                                    // 674\n      for (var i = 0, len = schedArr.length; i < len; i++) {                                                           // 675\n        if (startsArr[i] && !compare(startsArr[i], startDate)) {                                                       // 676\n          startsArr[i] = schedArr[i].start(dir, startDate);                                                            // 677\n        }                                                                                                              // 678\n      }                                                                                                                // 679\n    }                                                                                                                  // 680\n    function setRangeStarts(dir, schedArr, rangesArr, startDate) {                                                     // 681\n      var compare = compareFn(dir);                                                                                    // 682\n      for (var i = 0, len = schedArr.length; i < len; i++) {                                                           // 683\n        var nextStart = schedArr[i].start(dir, startDate);                                                             // 684\n        if (!nextStart) {                                                                                              // 685\n          rangesArr[i] = later.NEVER;                                                                                  // 686\n        } else {                                                                                                       // 687\n          rangesArr[i] = [ nextStart, schedArr[i].end(dir, nextStart) ];                                               // 688\n        }                                                                                                              // 689\n      }                                                                                                                // 690\n    }                                                                                                                  // 691\n    function updateRangeStarts(dir, schedArr, rangesArr, startDate) {                                                  // 692\n      var compare = compareFn(dir);                                                                                    // 693\n      for (var i = 0, len = schedArr.length; i < len; i++) {                                                           // 694\n        if (rangesArr[i] && !compare(rangesArr[i][0], startDate)) {                                                    // 695\n          var nextStart = schedArr[i].start(dir, startDate);                                                           // 696\n          if (!nextStart) {                                                                                            // 697\n            rangesArr[i] = later.NEVER;                                                                                // 698\n          } else {                                                                                                     // 699\n            rangesArr[i] = [ nextStart, schedArr[i].end(dir, nextStart) ];                                             // 700\n          }                                                                                                            // 701\n        }                                                                                                              // 702\n      }                                                                                                                // 703\n    }                                                                                                                  // 704\n    function tickStarts(dir, schedArr, startsArr, startDate) {                                                         // 705\n      for (var i = 0, len = schedArr.length; i < len; i++) {                                                           // 706\n        if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {                                          // 707\n          startsArr[i] = schedArr[i].start(dir, schedArr[i].tick(dir, startDate));                                     // 708\n        }                                                                                                              // 709\n      }                                                                                                                // 710\n    }                                                                                                                  // 711\n    function getStart(schedArr, startsArr, startDate, minEndDate) {                                                    // 712\n      var result;                                                                                                      // 713\n      for (var i = 0, len = startsArr.length; i < len; i++) {                                                          // 714\n        if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {                                          // 715\n          var start = schedArr[i].tickStart(startDate);                                                                // 716\n          if (minEndDate && start < minEndDate) {                                                                      // 717\n            return minEndDate;                                                                                         // 718\n          }                                                                                                            // 719\n          if (!result || start > result) {                                                                             // 720\n            result = start;                                                                                            // 721\n          }                                                                                                            // 722\n        }                                                                                                              // 723\n      }                                                                                                                // 724\n      return result;                                                                                                   // 725\n    }                                                                                                                  // 726\n    function calcRangeOverlap(dir, rangesArr, startDate) {                                                             // 727\n      var compare = compareFn(dir), result;                                                                            // 728\n      for (var i = 0, len = rangesArr.length; i < len; i++) {                                                          // 729\n        var range = rangesArr[i];                                                                                      // 730\n        if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {                   // 731\n          if (!result || compare(range[1], result)) {                                                                  // 732\n            result = range[1];                                                                                         // 733\n          }                                                                                                            // 734\n        }                                                                                                              // 735\n      }                                                                                                                // 736\n      return result;                                                                                                   // 737\n    }                                                                                                                  // 738\n    function calcMaxEndDate(exceptsArr, compare) {                                                                     // 739\n      var result;                                                                                                      // 740\n      for (var i = 0, len = exceptsArr.length; i < len; i++) {                                                         // 741\n        if (exceptsArr[i] && (!result || compare(result, exceptsArr[i][0]))) {                                         // 742\n          result = exceptsArr[i][0];                                                                                   // 743\n        }                                                                                                              // 744\n      }                                                                                                                // 745\n      return result;                                                                                                   // 746\n    }                                                                                                                  // 747\n    function calcEnd(dir, schedArr, startsArr, startDate, maxEndDate) {                                                // 748\n      var compare = compareFn(dir), result;                                                                            // 749\n      for (var i = 0, len = schedArr.length; i < len; i++) {                                                           // 750\n        var start = startsArr[i];                                                                                      // 751\n        if (start && start.getTime() === startDate.getTime()) {                                                        // 752\n          var end = schedArr[i].end(dir, start);                                                                       // 753\n          if (maxEndDate && (!end || compare(end, maxEndDate))) {                                                      // 754\n            return maxEndDate;                                                                                         // 755\n          }                                                                                                            // 756\n          if (!result || compare(end, result)) {                                                                       // 757\n            result = end;                                                                                              // 758\n          }                                                                                                            // 759\n        }                                                                                                              // 760\n      }                                                                                                                // 761\n      return result;                                                                                                   // 762\n    }                                                                                                                  // 763\n    function compareFn(dir) {                                                                                          // 764\n      return dir === \"next\" ? function(a, b) {                                                                         // 765\n        return !b || a.getTime() > b.getTime();                                                                        // 766\n      } : function(a, b) {                                                                                             // 767\n        return !a || b.getTime() > a.getTime();                                                                        // 768\n      };                                                                                                               // 769\n    }                                                                                                                  // 770\n    function findNext(arr, compare) {                                                                                  // 771\n      var next = arr[0];                                                                                               // 772\n      for (var i = 1, len = arr.length; i < len; i++) {                                                                // 773\n        if (arr[i] && compare(next, arr[i])) {                                                                         // 774\n          next = arr[i];                                                                                               // 775\n        }                                                                                                              // 776\n      }                                                                                                                // 777\n      return next;                                                                                                     // 778\n    }                                                                                                                  // 779\n    return {                                                                                                           // 780\n      isValid: function(d) {                                                                                           // 781\n        return getInstances(\"next\", 1, d, d) !== later.NEVER;                                                          // 782\n      },                                                                                                               // 783\n      next: function(count, startDate, endDate) {                                                                      // 784\n        return getInstances(\"next\", count || 1, startDate, endDate);                                                   // 785\n      },                                                                                                               // 786\n      prev: function(count, startDate, endDate) {                                                                      // 787\n        return getInstances(\"prev\", count || 1, startDate, endDate);                                                   // 788\n      },                                                                                                               // 789\n      nextRange: function(count, startDate, endDate) {                                                                 // 790\n        return getInstances(\"next\", count || 1, startDate, endDate, true);                                             // 791\n      },                                                                                                               // 792\n      prevRange: function(count, startDate, endDate) {                                                                 // 793\n        return getInstances(\"prev\", count || 1, startDate, endDate, true);                                             // 794\n      }                                                                                                                // 795\n    };                                                                                                                 // 796\n  };                                                                                                                   // 797\n  later.setTimeout = function(fn, sched) {                                                                             // 798\n    var s = later.schedule(sched), t;                                                                                  // 799\n    scheduleTimeout();                                                                                                 // 800\n    function scheduleTimeout() {                                                                                       // 801\n      var now = Date.now(), next = s.next(2, now), diff = next[0].getTime() - now;                                     // 802\n      if (diff < 1e3) {                                                                                                // 803\n        diff = next[1].getTime() - now;                                                                                // 804\n      }                                                                                                                // 805\n      if (diff < 2147483647) {                                                                                         // 806\n        t = setTimeout(fn, diff);                                                                                      // 807\n      } else {                                                                                                         // 808\n        t = setTimeout(scheduleTimeout, 2147483647);                                                                   // 809\n      }                                                                                                                // 810\n    }                                                                                                                  // 811\n    return {                                                                                                           // 812\n      clear: function() {                                                                                              // 813\n        clearTimeout(t);                                                                                               // 814\n      }                                                                                                                // 815\n    };                                                                                                                 // 816\n  };                                                                                                                   // 817\n  later.setInterval = function(fn, sched) {                                                                            // 818\n    var t = later.setTimeout(scheduleTimeout, sched), done = false;                                                    // 819\n    function scheduleTimeout() {                                                                                       // 820\n      if (!done) {                                                                                                     // 821\n        fn();                                                                                                          // 822\n        t = later.setTimeout(scheduleTimeout, sched);                                                                  // 823\n      }                                                                                                                // 824\n    }                                                                                                                  // 825\n    return {                                                                                                           // 826\n      clear: function() {                                                                                              // 827\n        done = true;                                                                                                   // 828\n        t.clear();                                                                                                     // 829\n      }                                                                                                                // 830\n    };                                                                                                                 // 831\n  };                                                                                                                   // 832\n  later.date = {};                                                                                                     // 833\n  later.date.timezone = function(useLocalTime) {                                                                       // 834\n    later.date.build = useLocalTime ? function(Y, M, D, h, m, s) {                                                     // 835\n      return new Date(Y, M, D, h, m, s);                                                                               // 836\n    } : function(Y, M, D, h, m, s) {                                                                                   // 837\n      return new Date(Date.UTC(Y, M, D, h, m, s));                                                                     // 838\n    };                                                                                                                 // 839\n    var get = useLocalTime ? \"get\" : \"getUTC\", d = Date.prototype;                                                     // 840\n    later.date.getYear = d[get + \"FullYear\"];                                                                          // 841\n    later.date.getMonth = d[get + \"Month\"];                                                                            // 842\n    later.date.getDate = d[get + \"Date\"];                                                                              // 843\n    later.date.getDay = d[get + \"Day\"];                                                                                // 844\n    later.date.getHour = d[get + \"Hours\"];                                                                             // 845\n    later.date.getMin = d[get + \"Minutes\"];                                                                            // 846\n    later.date.getSec = d[get + \"Seconds\"];                                                                            // 847\n    later.date.isUTC = !useLocalTime;                                                                                  // 848\n  };                                                                                                                   // 849\n  later.date.UTC = function() {                                                                                        // 850\n    later.date.timezone(false);                                                                                        // 851\n  };                                                                                                                   // 852\n  later.date.localTime = function() {                                                                                  // 853\n    later.date.timezone(true);                                                                                         // 854\n  };                                                                                                                   // 855\n  later.date.UTC();                                                                                                    // 856\n  later.SEC = 1e3;                                                                                                     // 857\n  later.MIN = later.SEC * 60;                                                                                          // 858\n  later.HOUR = later.MIN * 60;                                                                                         // 859\n  later.DAY = later.HOUR * 24;                                                                                         // 860\n  later.WEEK = later.DAY * 7;                                                                                          // 861\n  later.DAYS_IN_MONTH = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];                                            // 862\n  later.NEVER = 0;                                                                                                     // 863\n  later.date.next = function(Y, M, D, h, m, s) {                                                                       // 864\n    return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);          // 865\n  };                                                                                                                   // 866\n  later.date.nextRollover = function(d, val, constraint, period) {                                                     // 867\n    var cur = constraint.val(d), max = constraint.extent(d)[1];                                                        // 868\n    return (val || max) <= cur || val > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);         // 869\n  };                                                                                                                   // 870\n  later.date.prev = function(Y, M, D, h, m, s) {                                                                       // 871\n    var len = arguments.length;                                                                                        // 872\n    M = len < 2 ? 11 : M - 1;                                                                                          // 873\n    D = len < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;                                                    // 874\n    h = len < 4 ? 23 : h;                                                                                              // 875\n    m = len < 5 ? 59 : m;                                                                                              // 876\n    s = len < 6 ? 59 : s;                                                                                              // 877\n    return later.date.build(Y, M, D, h, m, s);                                                                         // 878\n  };                                                                                                                   // 879\n  later.date.prevRollover = function(d, val, constraint, period) {                                                     // 880\n    var cur = constraint.val(d);                                                                                       // 881\n    return val >= cur || !val ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);                     // 882\n  };                                                                                                                   // 883\n  later.parse = {};                                                                                                    // 884\n  later.parse.cron = function(expr, hasSeconds) {                                                                      // 885\n    var NAMES = {                                                                                                      // 886\n      JAN: 1,                                                                                                          // 887\n      FEB: 2,                                                                                                          // 888\n      MAR: 3,                                                                                                          // 889\n      APR: 4,                                                                                                          // 890\n      MAY: 5,                                                                                                          // 891\n      JUN: 6,                                                                                                          // 892\n      JUL: 7,                                                                                                          // 893\n      AUG: 8,                                                                                                          // 894\n      SEP: 9,                                                                                                          // 895\n      OCT: 10,                                                                                                         // 896\n      NOV: 11,                                                                                                         // 897\n      DEC: 12,                                                                                                         // 898\n      SUN: 1,                                                                                                          // 899\n      MON: 2,                                                                                                          // 900\n      TUE: 3,                                                                                                          // 901\n      WED: 4,                                                                                                          // 902\n      THU: 5,                                                                                                          // 903\n      FRI: 6,                                                                                                          // 904\n      SAT: 7                                                                                                           // 905\n    };                                                                                                                 // 906\n    var FIELDS = {                                                                                                     // 907\n      s: [ 0, 0, 59 ],                                                                                                 // 908\n      m: [ 1, 0, 59 ],                                                                                                 // 909\n      h: [ 2, 0, 23 ],                                                                                                 // 910\n      D: [ 3, 1, 31 ],                                                                                                 // 911\n      M: [ 4, 1, 12 ],                                                                                                 // 912\n      Y: [ 6, 1970, 2099 ],                                                                                            // 913\n      d: [ 5, 1, 7, 1 ]                                                                                                // 914\n    };                                                                                                                 // 915\n    function getValue(value, offset) {                                                                                 // 916\n      return isNaN(value) ? NAMES[value] || null : +value + (offset || 0);                                             // 917\n    }                                                                                                                  // 918\n    function cloneSchedule(sched) {                                                                                    // 919\n      var clone = {}, field;                                                                                           // 920\n      for (field in sched) {                                                                                           // 921\n        if (field !== \"dc\" && field !== \"d\") {                                                                         // 922\n          clone[field] = sched[field].slice(0);                                                                        // 923\n        }                                                                                                              // 924\n      }                                                                                                                // 925\n      return clone;                                                                                                    // 926\n    }                                                                                                                  // 927\n    function add(sched, name, min, max, inc) {                                                                         // 928\n      var i = min;                                                                                                     // 929\n      if (!sched[name]) {                                                                                              // 930\n        sched[name] = [];                                                                                              // 931\n      }                                                                                                                // 932\n      while (i <= max) {                                                                                               // 933\n        if (sched[name].indexOf(i) < 0) {                                                                              // 934\n          sched[name].push(i);                                                                                         // 935\n        }                                                                                                              // 936\n        i += inc || 1;                                                                                                 // 937\n      }                                                                                                                // 938\n    }                                                                                                                  // 939\n    function addHash(schedules, curSched, value, hash) {                                                               // 940\n      if (curSched.d && !curSched.dc || curSched.dc && curSched.dc.indexOf(hash) < 0) {                                // 941\n        schedules.push(cloneSchedule(curSched));                                                                       // 942\n        curSched = schedules[schedules.length - 1];                                                                    // 943\n      }                                                                                                                // 944\n      add(curSched, \"d\", value, value);                                                                                // 945\n      add(curSched, \"dc\", hash, hash);                                                                                 // 946\n    }                                                                                                                  // 947\n    function addWeekday(s, curSched, value) {                                                                          // 948\n      var except1 = {}, except2 = {};                                                                                  // 949\n      if (value === 1) {                                                                                               // 950\n        add(curSched, \"D\", 1, 3);                                                                                      // 951\n        add(curSched, \"d\", NAMES.MON, NAMES.FRI);                                                                      // 952\n        add(except1, \"D\", 2, 2);                                                                                       // 953\n        add(except1, \"d\", NAMES.TUE, NAMES.FRI);                                                                       // 954\n        add(except2, \"D\", 3, 3);                                                                                       // 955\n        add(except2, \"d\", NAMES.TUE, NAMES.FRI);                                                                       // 956\n      } else {                                                                                                         // 957\n        add(curSched, \"D\", value - 1, value + 1);                                                                      // 958\n        add(curSched, \"d\", NAMES.MON, NAMES.FRI);                                                                      // 959\n        add(except1, \"D\", value - 1, value - 1);                                                                       // 960\n        add(except1, \"d\", NAMES.MON, NAMES.THU);                                                                       // 961\n        add(except2, \"D\", value + 1, value + 1);                                                                       // 962\n        add(except2, \"d\", NAMES.TUE, NAMES.FRI);                                                                       // 963\n      }                                                                                                                // 964\n      s.exceptions.push(except1);                                                                                      // 965\n      s.exceptions.push(except2);                                                                                      // 966\n    }                                                                                                                  // 967\n    function addRange(item, curSched, name, min, max, offset) {                                                        // 968\n      var incSplit = item.split(\"/\"), inc = +incSplit[1], range = incSplit[0];                                         // 969\n      if (range !== \"*\" && range !== \"0\") {                                                                            // 970\n        var rangeSplit = range.split(\"-\");                                                                             // 971\n        min = getValue(rangeSplit[0], offset);                                                                         // 972\n        max = getValue(rangeSplit[1], offset) || max;                                                                  // 973\n      }                                                                                                                // 974\n      add(curSched, name, min, max, inc);                                                                              // 975\n    }                                                                                                                  // 976\n    function parse(item, s, name, min, max, offset) {                                                                  // 977\n      var value, split, schedules = s.schedules, curSched = schedules[schedules.length - 1];                           // 978\n      if (item === \"L\") {                                                                                              // 979\n        item = min - 1;                                                                                                // 980\n      }                                                                                                                // 981\n      if ((value = getValue(item, offset)) !== null) {                                                                 // 982\n        add(curSched, name, value, value);                                                                             // 983\n      } else if ((value = getValue(item.replace(\"W\", \"\"), offset)) !== null) {                                         // 984\n        addWeekday(s, curSched, value);                                                                                // 985\n      } else if ((value = getValue(item.replace(\"L\", \"\"), offset)) !== null) {                                         // 986\n        addHash(schedules, curSched, value, min - 1);                                                                  // 987\n      } else if ((split = item.split(\"#\")).length === 2) {                                                             // 988\n        value = getValue(split[0], offset);                                                                            // 989\n        addHash(schedules, curSched, value, getValue(split[1]));                                                       // 990\n      } else {                                                                                                         // 991\n        addRange(item, curSched, name, min, max, offset);                                                              // 992\n      }                                                                                                                // 993\n    }                                                                                                                  // 994\n    function isHash(item) {                                                                                            // 995\n      return item.indexOf(\"#\") > -1 || item.indexOf(\"L\") > 0;                                                          // 996\n    }                                                                                                                  // 997\n    function itemSorter(a, b) {                                                                                        // 998\n      return isHash(a) && !isHash(b) ? 1 : 0;                                                                          // 999\n    }                                                                                                                  // 1000\n    function parseExpr(expr) {                                                                                         // 1001\n      if (expr === \"* * * * * *\") {                                                                                    // 1002\n        expr = \"0/1 * * * * *\";                                                                                        // 1003\n      }                                                                                                                // 1004\n      var schedule = {                                                                                                 // 1005\n        schedules: [ {} ],                                                                                             // 1006\n        exceptions: []                                                                                                 // 1007\n      }, components = expr.split(\" \"), field, f, component, items;                                                     // 1008\n      for (field in FIELDS) {                                                                                          // 1009\n        f = FIELDS[field];                                                                                             // 1010\n        component = components[f[0]];                                                                                  // 1011\n        if (component && component !== \"*\" && component !== \"?\") {                                                     // 1012\n          items = component.split(\",\").sort(itemSorter);                                                               // 1013\n          var i, length = items.length;                                                                                // 1014\n          for (i = 0; i < length; i++) {                                                                               // 1015\n            parse(items[i], schedule, field, f[1], f[2], f[3]);                                                        // 1016\n          }                                                                                                            // 1017\n        }                                                                                                              // 1018\n      }                                                                                                                // 1019\n      return schedule;                                                                                                 // 1020\n    }                                                                                                                  // 1021\n    var e = expr.toUpperCase();                                                                                        // 1022\n    return parseExpr(hasSeconds ? e : \"0 \" + e);                                                                       // 1023\n  };                                                                                                                   // 1024\n  later.parse.recur = function() {                                                                                     // 1025\n    var schedules = [], exceptions = [], cur, curArr = schedules, curName, values, every, modifier, applyMin, applyMax, i, last;\n    function add(name, min, max) {                                                                                     // 1027\n      name = modifier ? name + \"_\" + modifier : name;                                                                  // 1028\n      if (!cur) {                                                                                                      // 1029\n        curArr.push({});                                                                                               // 1030\n        cur = curArr[0];                                                                                               // 1031\n      }                                                                                                                // 1032\n      if (!cur[name]) {                                                                                                // 1033\n        cur[name] = [];                                                                                                // 1034\n      }                                                                                                                // 1035\n      curName = cur[name];                                                                                             // 1036\n      if (every) {                                                                                                     // 1037\n        values = [];                                                                                                   // 1038\n        for (i = min; i <= max; i += every) {                                                                          // 1039\n          values.push(i);                                                                                              // 1040\n        }                                                                                                              // 1041\n        last = {                                                                                                       // 1042\n          n: name,                                                                                                     // 1043\n          x: every,                                                                                                    // 1044\n          c: curName.length,                                                                                           // 1045\n          m: max                                                                                                       // 1046\n        };                                                                                                             // 1047\n      }                                                                                                                // 1048\n      values = applyMin ? [ min ] : applyMax ? [ max ] : values;                                                       // 1049\n      var length = values.length;                                                                                      // 1050\n      for (i = 0; i < length; i += 1) {                                                                                // 1051\n        var val = values[i];                                                                                           // 1052\n        if (curName.indexOf(val) < 0) {                                                                                // 1053\n          curName.push(val);                                                                                           // 1054\n        }                                                                                                              // 1055\n      }                                                                                                                // 1056\n      values = every = modifier = applyMin = applyMax = 0;                                                             // 1057\n    }                                                                                                                  // 1058\n    return {                                                                                                           // 1059\n      schedules: schedules,                                                                                            // 1060\n      exceptions: exceptions,                                                                                          // 1061\n      on: function() {                                                                                                 // 1062\n        values = arguments[0] instanceof Array ? arguments[0] : arguments;                                             // 1063\n        return this;                                                                                                   // 1064\n      },                                                                                                               // 1065\n      every: function(x) {                                                                                             // 1066\n        every = x || 1;                                                                                                // 1067\n        return this;                                                                                                   // 1068\n      },                                                                                                               // 1069\n      after: function(x) {                                                                                             // 1070\n        modifier = \"a\";                                                                                                // 1071\n        values = [ x ];                                                                                                // 1072\n        return this;                                                                                                   // 1073\n      },                                                                                                               // 1074\n      before: function(x) {                                                                                            // 1075\n        modifier = \"b\";                                                                                                // 1076\n        values = [ x ];                                                                                                // 1077\n        return this;                                                                                                   // 1078\n      },                                                                                                               // 1079\n      first: function() {                                                                                              // 1080\n        applyMin = 1;                                                                                                  // 1081\n        return this;                                                                                                   // 1082\n      },                                                                                                               // 1083\n      last: function() {                                                                                               // 1084\n        applyMax = 1;                                                                                                  // 1085\n        return this;                                                                                                   // 1086\n      },                                                                                                               // 1087\n      time: function() {                                                                                               // 1088\n        for (var i = 0, len = values.length; i < len; i++) {                                                           // 1089\n          var split = values[i].split(\":\");                                                                            // 1090\n          if (split.length < 3) split.push(0);                                                                         // 1091\n          values[i] = +split[0] * 3600 + +split[1] * 60 + +split[2];                                                   // 1092\n        }                                                                                                              // 1093\n        add(\"t\");                                                                                                      // 1094\n        return this;                                                                                                   // 1095\n      },                                                                                                               // 1096\n      second: function() {                                                                                             // 1097\n        add(\"s\", 0, 59);                                                                                               // 1098\n        return this;                                                                                                   // 1099\n      },                                                                                                               // 1100\n      minute: function() {                                                                                             // 1101\n        add(\"m\", 0, 59);                                                                                               // 1102\n        return this;                                                                                                   // 1103\n      },                                                                                                               // 1104\n      hour: function() {                                                                                               // 1105\n        add(\"h\", 0, 23);                                                                                               // 1106\n        return this;                                                                                                   // 1107\n      },                                                                                                               // 1108\n      dayOfMonth: function() {                                                                                         // 1109\n        add(\"D\", 1, applyMax ? 0 : 31);                                                                                // 1110\n        return this;                                                                                                   // 1111\n      },                                                                                                               // 1112\n      dayOfWeek: function() {                                                                                          // 1113\n        add(\"d\", 1, 7);                                                                                                // 1114\n        return this;                                                                                                   // 1115\n      },                                                                                                               // 1116\n      onWeekend: function() {                                                                                          // 1117\n        values = [ 1, 7 ];                                                                                             // 1118\n        return this.dayOfWeek();                                                                                       // 1119\n      },                                                                                                               // 1120\n      onWeekday: function() {                                                                                          // 1121\n        values = [ 2, 3, 4, 5, 6 ];                                                                                    // 1122\n        return this.dayOfWeek();                                                                                       // 1123\n      },                                                                                                               // 1124\n      dayOfWeekCount: function() {                                                                                     // 1125\n        add(\"dc\", 1, applyMax ? 0 : 5);                                                                                // 1126\n        return this;                                                                                                   // 1127\n      },                                                                                                               // 1128\n      dayOfYear: function() {                                                                                          // 1129\n        add(\"dy\", 1, applyMax ? 0 : 366);                                                                              // 1130\n        return this;                                                                                                   // 1131\n      },                                                                                                               // 1132\n      weekOfMonth: function() {                                                                                        // 1133\n        add(\"wm\", 1, applyMax ? 0 : 5);                                                                                // 1134\n        return this;                                                                                                   // 1135\n      },                                                                                                               // 1136\n      weekOfYear: function() {                                                                                         // 1137\n        add(\"wy\", 1, applyMax ? 0 : 53);                                                                               // 1138\n        return this;                                                                                                   // 1139\n      },                                                                                                               // 1140\n      month: function() {                                                                                              // 1141\n        add(\"M\", 1, 12);                                                                                               // 1142\n        return this;                                                                                                   // 1143\n      },                                                                                                               // 1144\n      year: function() {                                                                                               // 1145\n        add(\"Y\", 1970, 2450);                                                                                          // 1146\n        return this;                                                                                                   // 1147\n      },                                                                                                               // 1148\n      fullDate: function() {                                                                                           // 1149\n        for (var i = 0, len = values.length; i < len; i++) {                                                           // 1150\n          values[i] = values[i].getTime();                                                                             // 1151\n        }                                                                                                              // 1152\n        add(\"fd\");                                                                                                     // 1153\n        return this;                                                                                                   // 1154\n      },                                                                                                               // 1155\n      customModifier: function(id, vals) {                                                                             // 1156\n        var custom = later.modifier[id];                                                                               // 1157\n        if (!custom) throw new Error(\"Custom modifier \" + id + \" not recognized!\");                                    // 1158\n        modifier = id;                                                                                                 // 1159\n        values = arguments[1] instanceof Array ? arguments[1] : [ arguments[1] ];                                      // 1160\n        return this;                                                                                                   // 1161\n      },                                                                                                               // 1162\n      customPeriod: function(id) {                                                                                     // 1163\n        var custom = later[id];                                                                                        // 1164\n        if (!custom) throw new Error(\"Custom time period \" + id + \" not recognized!\");                                 // 1165\n        add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);                                           // 1166\n        return this;                                                                                                   // 1167\n      },                                                                                                               // 1168\n      startingOn: function(start) {                                                                                    // 1169\n        return this.between(start, last.m);                                                                            // 1170\n      },                                                                                                               // 1171\n      between: function(start, end) {                                                                                  // 1172\n        cur[last.n] = cur[last.n].splice(0, last.c);                                                                   // 1173\n        every = last.x;                                                                                                // 1174\n        add(last.n, start, end);                                                                                       // 1175\n        return this;                                                                                                   // 1176\n      },                                                                                                               // 1177\n      and: function() {                                                                                                // 1178\n        cur = curArr[curArr.push({}) - 1];                                                                             // 1179\n        return this;                                                                                                   // 1180\n      },                                                                                                               // 1181\n      except: function() {                                                                                             // 1182\n        curArr = exceptions;                                                                                           // 1183\n        cur = null;                                                                                                    // 1184\n        return this;                                                                                                   // 1185\n      }                                                                                                                // 1186\n    };                                                                                                                 // 1187\n  };                                                                                                                   // 1188\n  later.parse.text = function(str) {                                                                                   // 1189\n    var recur = later.parse.recur, pos = 0, input = \"\", error;                                                         // 1190\n    var TOKENTYPES = {                                                                                                 // 1191\n      eof: /^$/,                                                                                                       // 1192\n      rank: /^((\\d\\d\\d\\d)|([2-5]?1(st)?|[2-5]?2(nd)?|[2-5]?3(rd)?|(0|[1-5]?[4-9]|[1-5]0|1[1-3])(th)?))\\b/,             // 1193\n      time: /^((([0]?[1-9]|1[0-2]):[0-5]\\d(\\s)?(am|pm))|(([0]?\\d|1\\d|2[0-3]):[0-5]\\d))\\b/,                             // 1194\n      dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\\b/,                                      // 1195\n      monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\\b/,\n      yearIndex: /^(\\d\\d\\d\\d)\\b/,                                                                                      // 1197\n      every: /^every\\b/,                                                                                               // 1198\n      after: /^after\\b/,                                                                                               // 1199\n      before: /^before\\b/,                                                                                             // 1200\n      second: /^(s|sec(ond)?(s)?)\\b/,                                                                                  // 1201\n      minute: /^(m|min(ute)?(s)?)\\b/,                                                                                  // 1202\n      hour: /^(h|hour(s)?)\\b/,                                                                                         // 1203\n      day: /^(day(s)?( of the month)?)\\b/,                                                                             // 1204\n      dayInstance: /^day instance\\b/,                                                                                  // 1205\n      dayOfWeek: /^day(s)? of the week\\b/,                                                                             // 1206\n      dayOfYear: /^day(s)? of the year\\b/,                                                                             // 1207\n      weekOfYear: /^week(s)?( of the year)?\\b/,                                                                        // 1208\n      weekOfMonth: /^week(s)? of the month\\b/,                                                                         // 1209\n      weekday: /^weekday\\b/,                                                                                           // 1210\n      weekend: /^weekend\\b/,                                                                                           // 1211\n      month: /^month(s)?\\b/,                                                                                           // 1212\n      year: /^year(s)?\\b/,                                                                                             // 1213\n      between: /^between (the)?\\b/,                                                                                    // 1214\n      start: /^(start(ing)? (at|on( the)?)?)\\b/,                                                                       // 1215\n      at: /^(at|@)\\b/,                                                                                                 // 1216\n      and: /^(,|and\\b)/,                                                                                               // 1217\n      except: /^(except\\b)/,                                                                                           // 1218\n      also: /(also)\\b/,                                                                                                // 1219\n      first: /^(first)\\b/,                                                                                             // 1220\n      last: /^last\\b/,                                                                                                 // 1221\n      \"in\": /^in\\b/,                                                                                                   // 1222\n      of: /^of\\b/,                                                                                                     // 1223\n      onthe: /^on the\\b/,                                                                                              // 1224\n      on: /^on\\b/,                                                                                                     // 1225\n      through: /(-|^(to|through)\\b)/                                                                                   // 1226\n    };                                                                                                                 // 1227\n    var NAMES = {                                                                                                      // 1228\n      jan: 1,                                                                                                          // 1229\n      feb: 2,                                                                                                          // 1230\n      mar: 3,                                                                                                          // 1231\n      apr: 4,                                                                                                          // 1232\n      may: 5,                                                                                                          // 1233\n      jun: 6,                                                                                                          // 1234\n      jul: 7,                                                                                                          // 1235\n      aug: 8,                                                                                                          // 1236\n      sep: 9,                                                                                                          // 1237\n      oct: 10,                                                                                                         // 1238\n      nov: 11,                                                                                                         // 1239\n      dec: 12,                                                                                                         // 1240\n      sun: 1,                                                                                                          // 1241\n      mon: 2,                                                                                                          // 1242\n      tue: 3,                                                                                                          // 1243\n      wed: 4,                                                                                                          // 1244\n      thu: 5,                                                                                                          // 1245\n      fri: 6,                                                                                                          // 1246\n      sat: 7,                                                                                                          // 1247\n      \"1st\": 1,                                                                                                        // 1248\n      fir: 1,                                                                                                          // 1249\n      \"2nd\": 2,                                                                                                        // 1250\n      sec: 2,                                                                                                          // 1251\n      \"3rd\": 3,                                                                                                        // 1252\n      thi: 3,                                                                                                          // 1253\n      \"4th\": 4,                                                                                                        // 1254\n      \"for\": 4                                                                                                         // 1255\n    };                                                                                                                 // 1256\n    function t(start, end, text, type) {                                                                               // 1257\n      return {                                                                                                         // 1258\n        startPos: start,                                                                                               // 1259\n        endPos: end,                                                                                                   // 1260\n        text: text,                                                                                                    // 1261\n        type: type                                                                                                     // 1262\n      };                                                                                                               // 1263\n    }                                                                                                                  // 1264\n    function peek(expected) {                                                                                          // 1265\n      var scanTokens = expected instanceof Array ? expected : [ expected ], whiteSpace = /\\s+/, token, curInput, m, scanToken, start, len;\n      scanTokens.push(whiteSpace);                                                                                     // 1267\n      start = pos;                                                                                                     // 1268\n      while (!token || token.type === whiteSpace) {                                                                    // 1269\n        len = -1;                                                                                                      // 1270\n        curInput = input.substring(start);                                                                             // 1271\n        token = t(start, start, input.split(whiteSpace)[0]);                                                           // 1272\n        var i, length = scanTokens.length;                                                                             // 1273\n        for (i = 0; i < length; i++) {                                                                                 // 1274\n          scanToken = scanTokens[i];                                                                                   // 1275\n          m = scanToken.exec(curInput);                                                                                // 1276\n          if (m && m.index === 0 && m[0].length > len) {                                                               // 1277\n            len = m[0].length;                                                                                         // 1278\n            token = t(start, start + len, curInput.substring(0, len), scanToken);                                      // 1279\n          }                                                                                                            // 1280\n        }                                                                                                              // 1281\n        if (token.type === whiteSpace) {                                                                               // 1282\n          start = token.endPos;                                                                                        // 1283\n        }                                                                                                              // 1284\n      }                                                                                                                // 1285\n      return token;                                                                                                    // 1286\n    }                                                                                                                  // 1287\n    function scan(expectedToken) {                                                                                     // 1288\n      var token = peek(expectedToken);                                                                                 // 1289\n      pos = token.endPos;                                                                                              // 1290\n      return token;                                                                                                    // 1291\n    }                                                                                                                  // 1292\n    function parseThroughExpr(tokenType) {                                                                             // 1293\n      var start = +parseTokenValue(tokenType), end = checkAndParse(TOKENTYPES.through) ? +parseTokenValue(tokenType) : start, nums = [];\n      for (var i = start; i <= end; i++) {                                                                             // 1295\n        nums.push(i);                                                                                                  // 1296\n      }                                                                                                                // 1297\n      return nums;                                                                                                     // 1298\n    }                                                                                                                  // 1299\n    function parseRanges(tokenType) {                                                                                  // 1300\n      var nums = parseThroughExpr(tokenType);                                                                          // 1301\n      while (checkAndParse(TOKENTYPES.and)) {                                                                          // 1302\n        nums = nums.concat(parseThroughExpr(tokenType));                                                               // 1303\n      }                                                                                                                // 1304\n      return nums;                                                                                                     // 1305\n    }                                                                                                                  // 1306\n    function parseEvery(r) {                                                                                           // 1307\n      var num, period, start, end;                                                                                     // 1308\n      if (checkAndParse(TOKENTYPES.weekend)) {                                                                         // 1309\n        r.on(NAMES.sun, NAMES.sat).dayOfWeek();                                                                        // 1310\n      } else if (checkAndParse(TOKENTYPES.weekday)) {                                                                  // 1311\n        r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();                                       // 1312\n      } else {                                                                                                         // 1313\n        num = parseTokenValue(TOKENTYPES.rank);                                                                        // 1314\n        r.every(num);                                                                                                  // 1315\n        period = parseTimePeriod(r);                                                                                   // 1316\n        if (checkAndParse(TOKENTYPES.start)) {                                                                         // 1317\n          num = parseTokenValue(TOKENTYPES.rank);                                                                      // 1318\n          r.startingOn(num);                                                                                           // 1319\n          parseToken(period.type);                                                                                     // 1320\n        } else if (checkAndParse(TOKENTYPES.between)) {                                                                // 1321\n          start = parseTokenValue(TOKENTYPES.rank);                                                                    // 1322\n          if (checkAndParse(TOKENTYPES.and)) {                                                                         // 1323\n            end = parseTokenValue(TOKENTYPES.rank);                                                                    // 1324\n            r.between(start, end);                                                                                     // 1325\n          }                                                                                                            // 1326\n        }                                                                                                              // 1327\n      }                                                                                                                // 1328\n    }                                                                                                                  // 1329\n    function parseOnThe(r) {                                                                                           // 1330\n      if (checkAndParse(TOKENTYPES.first)) {                                                                           // 1331\n        r.first();                                                                                                     // 1332\n      } else if (checkAndParse(TOKENTYPES.last)) {                                                                     // 1333\n        r.last();                                                                                                      // 1334\n      } else {                                                                                                         // 1335\n        r.on(parseRanges(TOKENTYPES.rank));                                                                            // 1336\n      }                                                                                                                // 1337\n      parseTimePeriod(r);                                                                                              // 1338\n    }                                                                                                                  // 1339\n    function parseScheduleExpr(str) {                                                                                  // 1340\n      pos = 0;                                                                                                         // 1341\n      input = str;                                                                                                     // 1342\n      error = -1;                                                                                                      // 1343\n      var r = recur();                                                                                                 // 1344\n      while (pos < input.length && error < 0) {                                                                        // 1345\n        var token = parseToken([ TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES[\"in\"], TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also ]);\n        switch (token.type) {                                                                                          // 1347\n         case TOKENTYPES.every:                                                                                        // 1348\n          parseEvery(r);                                                                                               // 1349\n          break;                                                                                                       // 1350\n                                                                                                                       // 1351\n         case TOKENTYPES.after:                                                                                        // 1352\n          if (peek(TOKENTYPES.time).type !== undefined) {                                                              // 1353\n            r.after(parseTokenValue(TOKENTYPES.time));                                                                 // 1354\n            r.time();                                                                                                  // 1355\n          } else {                                                                                                     // 1356\n            r.after(parseTokenValue(TOKENTYPES.rank));                                                                 // 1357\n            parseTimePeriod(r);                                                                                        // 1358\n          }                                                                                                            // 1359\n          break;                                                                                                       // 1360\n                                                                                                                       // 1361\n         case TOKENTYPES.before:                                                                                       // 1362\n          if (peek(TOKENTYPES.time).type !== undefined) {                                                              // 1363\n            r.before(parseTokenValue(TOKENTYPES.time));                                                                // 1364\n            r.time();                                                                                                  // 1365\n          } else {                                                                                                     // 1366\n            r.before(parseTokenValue(TOKENTYPES.rank));                                                                // 1367\n            parseTimePeriod(r);                                                                                        // 1368\n          }                                                                                                            // 1369\n          break;                                                                                                       // 1370\n                                                                                                                       // 1371\n         case TOKENTYPES.onthe:                                                                                        // 1372\n          parseOnThe(r);                                                                                               // 1373\n          break;                                                                                                       // 1374\n                                                                                                                       // 1375\n         case TOKENTYPES.on:                                                                                           // 1376\n          r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();                                                           // 1377\n          break;                                                                                                       // 1378\n                                                                                                                       // 1379\n         case TOKENTYPES.of:                                                                                           // 1380\n          r.on(parseRanges(TOKENTYPES.monthName)).month();                                                             // 1381\n          break;                                                                                                       // 1382\n                                                                                                                       // 1383\n         case TOKENTYPES[\"in\"]:                                                                                        // 1384\n          r.on(parseRanges(TOKENTYPES.yearIndex)).year();                                                              // 1385\n          break;                                                                                                       // 1386\n                                                                                                                       // 1387\n         case TOKENTYPES.at:                                                                                           // 1388\n          r.on(parseTokenValue(TOKENTYPES.time)).time();                                                               // 1389\n          while (checkAndParse(TOKENTYPES.and)) {                                                                      // 1390\n            r.on(parseTokenValue(TOKENTYPES.time)).time();                                                             // 1391\n          }                                                                                                            // 1392\n          break;                                                                                                       // 1393\n                                                                                                                       // 1394\n         case TOKENTYPES.and:                                                                                          // 1395\n          break;                                                                                                       // 1396\n                                                                                                                       // 1397\n         case TOKENTYPES.also:                                                                                         // 1398\n          r.and();                                                                                                     // 1399\n          break;                                                                                                       // 1400\n                                                                                                                       // 1401\n         case TOKENTYPES.except:                                                                                       // 1402\n          r.except();                                                                                                  // 1403\n          break;                                                                                                       // 1404\n                                                                                                                       // 1405\n         default:                                                                                                      // 1406\n          error = pos;                                                                                                 // 1407\n        }                                                                                                              // 1408\n      }                                                                                                                // 1409\n      return {                                                                                                         // 1410\n        schedules: r.schedules,                                                                                        // 1411\n        exceptions: r.exceptions,                                                                                      // 1412\n        error: error                                                                                                   // 1413\n      };                                                                                                               // 1414\n    }                                                                                                                  // 1415\n    function parseTimePeriod(r) {                                                                                      // 1416\n      var timePeriod = parseToken([ TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear ]);\n      switch (timePeriod.type) {                                                                                       // 1418\n       case TOKENTYPES.second:                                                                                         // 1419\n        r.second();                                                                                                    // 1420\n        break;                                                                                                         // 1421\n                                                                                                                       // 1422\n       case TOKENTYPES.minute:                                                                                         // 1423\n        r.minute();                                                                                                    // 1424\n        break;                                                                                                         // 1425\n                                                                                                                       // 1426\n       case TOKENTYPES.hour:                                                                                           // 1427\n        r.hour();                                                                                                      // 1428\n        break;                                                                                                         // 1429\n                                                                                                                       // 1430\n       case TOKENTYPES.dayOfYear:                                                                                      // 1431\n        r.dayOfYear();                                                                                                 // 1432\n        break;                                                                                                         // 1433\n                                                                                                                       // 1434\n       case TOKENTYPES.dayOfWeek:                                                                                      // 1435\n        r.dayOfWeek();                                                                                                 // 1436\n        break;                                                                                                         // 1437\n                                                                                                                       // 1438\n       case TOKENTYPES.dayInstance:                                                                                    // 1439\n        r.dayOfWeekCount();                                                                                            // 1440\n        break;                                                                                                         // 1441\n                                                                                                                       // 1442\n       case TOKENTYPES.day:                                                                                            // 1443\n        r.dayOfMonth();                                                                                                // 1444\n        break;                                                                                                         // 1445\n                                                                                                                       // 1446\n       case TOKENTYPES.weekOfMonth:                                                                                    // 1447\n        r.weekOfMonth();                                                                                               // 1448\n        break;                                                                                                         // 1449\n                                                                                                                       // 1450\n       case TOKENTYPES.weekOfYear:                                                                                     // 1451\n        r.weekOfYear();                                                                                                // 1452\n        break;                                                                                                         // 1453\n                                                                                                                       // 1454\n       case TOKENTYPES.month:                                                                                          // 1455\n        r.month();                                                                                                     // 1456\n        break;                                                                                                         // 1457\n                                                                                                                       // 1458\n       case TOKENTYPES.year:                                                                                           // 1459\n        r.year();                                                                                                      // 1460\n        break;                                                                                                         // 1461\n                                                                                                                       // 1462\n       default:                                                                                                        // 1463\n        error = pos;                                                                                                   // 1464\n      }                                                                                                                // 1465\n      return timePeriod;                                                                                               // 1466\n    }                                                                                                                  // 1467\n    function checkAndParse(tokenType) {                                                                                // 1468\n      var found = peek(tokenType).type === tokenType;                                                                  // 1469\n      if (found) {                                                                                                     // 1470\n        scan(tokenType);                                                                                               // 1471\n      }                                                                                                                // 1472\n      return found;                                                                                                    // 1473\n    }                                                                                                                  // 1474\n    function parseToken(tokenType) {                                                                                   // 1475\n      var t = scan(tokenType);                                                                                         // 1476\n      if (t.type) {                                                                                                    // 1477\n        t.text = convertString(t.text, tokenType);                                                                     // 1478\n      } else {                                                                                                         // 1479\n        error = pos;                                                                                                   // 1480\n      }                                                                                                                // 1481\n      return t;                                                                                                        // 1482\n    }                                                                                                                  // 1483\n    function parseTokenValue(tokenType) {                                                                              // 1484\n      return parseToken(tokenType).text;                                                                               // 1485\n    }                                                                                                                  // 1486\n    function convertString(str, tokenType) {                                                                           // 1487\n      var output = str;                                                                                                // 1488\n      switch (tokenType) {                                                                                             // 1489\n       case TOKENTYPES.time:                                                                                           // 1490\n        var parts = str.split(/(:|am|pm)/), hour = parts[3] === \"pm\" && parts[0] < 12 ? parseInt(parts[0], 10) + 12 : parts[0], min = parts[2].trim();\n        output = (hour.length === 1 ? \"0\" : \"\") + hour + \":\" + min;                                                    // 1492\n        break;                                                                                                         // 1493\n                                                                                                                       // 1494\n       case TOKENTYPES.rank:                                                                                           // 1495\n        output = parseInt(/^\\d+/.exec(str)[0], 10);                                                                    // 1496\n        break;                                                                                                         // 1497\n                                                                                                                       // 1498\n       case TOKENTYPES.monthName:                                                                                      // 1499\n       case TOKENTYPES.dayName:                                                                                        // 1500\n        output = NAMES[str.substring(0, 3)];                                                                           // 1501\n        break;                                                                                                         // 1502\n      }                                                                                                                // 1503\n      return output;                                                                                                   // 1504\n    }                                                                                                                  // 1505\n    return parseScheduleExpr(str.toLowerCase());                                                                       // 1506\n  };                                                                                                                   // 1507\n  return later;                                                                                                        // 1508\n}();                                                                                                                   // 1509\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}